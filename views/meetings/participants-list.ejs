<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Participant Management</title>
    <link rel="icon" href="/assets/favicon_inverted.png" type="image/x-icon">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <link rel="stylesheet" href="/assets/global/css/iziToast.min.css">
</head>
<body class="bg-gray-50">
    <%- include("../partials/no-loginHeader.ejs") %>
    <div class="container mx-auto p-4">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-800">Seminar Participants</h1>
            <div class="space-x-2">
                <button onclick="exportToPDF()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md">
                    Export PDF
                </button>
                <button onclick="exportToCSV()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md">
                    Export CSV
                </button>

                 <button onclick="window.location.href='/manage/pre-reg/<%=meetingId%>'" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md">
                   Edit Form
                </button>
                <a href="/manage/guests/<%= meetingId %>">Manage Guests</a>
            </div>
        </div>

        <!-- Participants Table -->
        <div class="bg-white shadow-md rounded-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Age</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Organization</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Custom Answers</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="participantsTable" class="bg-white divide-y divide-gray-200">
                    <!-- Participants will be loaded here -->
                </tbody>
            </table>
            
            <!-- Pagination Controls -->
            <div class="px-6 py-3 border-t border-gray-200 bg-white">
                <div class="flex flex-col sm:flex-row items-center justify-between">
                    <div class="mb-2 sm:mb-0">
                        <p class="text-sm text-gray-700" id="pagination-info">
                            Showing <span class="font-medium">0</span> to <span class="font-medium">0</span> of <span class="font-medium">0</span> results
                        </p>
                    </div>
                    <div class="flex space-x-1">
                        <button id="prev-page" class="px-3 py-1 border rounded text-sm font-medium disabled:opacity-50">
                            Previous
                        </button>
                        <div id="page-numbers" class="flex space-x-1">
                            <!-- Page numbers will be inserted here -->
                        </div>
                        <button id="next-page" class="px-3 py-1 border rounded text-sm font-medium disabled:opacity-50">
                            Next
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Custom Answers Modal -->
        <div id="answersModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
            <div class="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-bold" id="modalTitle">Participant Answers</h3>
                    <button onclick="closeAnswersModal()" class="text-gray-500 hover:text-gray-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div id="answersContent" class="space-y-4">
                    <!-- Custom answers will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.1/build/global/luxon.min.js"></script>
    <script src="/assets/global/js/iziToast.min.js"></script>
    <script>
        // State management
        const state = {
            currentPage: 1,
            itemsPerPage: 10,
            totalParticipants: 0,
            totalPages: 1,
            allParticipants: [],
            customQuestions: {}
        };

        // Load participants from server
        async function fetchParticipants(page = 1) {
            try {
                const response = await fetch(`/api/participants/<%=meetingId%>?page=${page}&limit=${state.itemsPerPage}`);
                
                if (!response.ok) throw new Error('Failed to fetch participants');
                
                const data = await response.json();
                
                if (data.error) {
                    showError(data.error);
                    return;
                }
                
                state.allParticipants = data.participants || [];
                state.totalParticipants = data.pagination?.total || 0;
                state.totalPages = data.pagination?.totalPages || 1;
                state.currentPage = page;
                
                // Store custom questions if available
                if (data.questions) {
                    state.customQuestions = data.questions.reduce((acc, q) => {
                        acc[q.id] = q;
                        return acc;
                    }, {});
                }
                
                renderParticipants();
                updatePaginationUI();
                
            } catch (error) {
                console.error('Error:', error);
                showError(`Error loading participants: ${error.message}`);
            }
        }

        // Render participants into table
        function renderParticipants() {
            const tableBody = document.getElementById('participantsTable');
            tableBody.innerHTML = '';
            
            if (state.allParticipants.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="8" class="px-6 py-4 text-center text-sm text-gray-500">
                            No participants found
                        </td>
                    </tr>
                `;
                return;
            }
            state.allParticipants.forEach(participant => {
                const row = document.createElement('tr');
           
                // Parse custom answers
                const customAnswers = participant.custom_answers 
                    ? participant.custom_answers
                    : {};
                
                // Count answered custom questions
                const answeredQuestions = Object.keys(customAnswers).length;
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        ${participant.first_name} ${participant.last_name}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.email_address}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.country}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.age || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${participant.organization}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${answeredQuestions} answered
                        ${answeredQuestions > 0 ? 
                            `<button onclick="showAnswersModal(${participant.id})" class="text-purple-600 hover:text-purple-900 ml-2">
                                View
                            </button>` : ''
                        }
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <button onclick="deleteParticipant(${participant.id})" class="text-red-600 hover:text-red-900">
                            Delete
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Show answers modal
        function showAnswersModal(participantId) {
            const participant = state.allParticipants.find(p => p.id === participantId);
            if (!participant) return;
            
            const customAnswers = participant.custom_answers 
                ? participant.custom_answers
                : {};
            
            const modalContent = document.getElementById('answersContent');
            modalContent.innerHTML = '';
            
            document.getElementById('modalTitle').textContent = 
                `Custom Answers for ${participant.first_name} ${participant.last_name}`;
            
            if (Object.keys(customAnswers).length === 0) {
                modalContent.innerHTML = '<p class="text-gray-500">No custom answers provided.</p>';
            } else {
                for (const [questionId, answer] of Object.entries(customAnswers)) {
                 
                    
                    const question = state.customQuestions[questionId];
                    const questionText = question?.question || `Question ID: ${questionId}`;
                    const answerValue = Array.isArray(answer) ? answer.answer : answer.answer;
                    
                    const answerDiv = document.createElement('div');
                    answerDiv.className = 'border-b border-gray-200 pb-4';
                    answerDiv.innerHTML = `
                        <h4 class="font-medium text-gray-800">${questionText}</h4>
                        <p class="mt-1 text-gray-600">${answerValue || 'No answer provided'}</p>
                    `;
                    modalContent.appendChild(answerDiv);
                }
            }
            
            document.getElementById('answersModal').classList.remove('hidden');
        }

        // Close answers modal
        function closeAnswersModal() {
            document.getElementById('answersModal').classList.add('hidden');
        }

        // Delete participant
        async function deleteParticipant(id) {
            if (!confirm('Are you sure you want to delete this participant?')) return;
            
            try {
                const response = await fetch(`/api/participants/delete/${id}`, {
                    method: 'DELETE'
                });
                
                if (!response.ok) throw new Error('Failed to delete participant');
                
                const result = await response.json();
                
                if (result.error) {
                    showError(result.error);
                    return;
                }
                
                showSuccess('Participant deleted successfully');
                fetchParticipants(state.currentPage);
                
            } catch (error) {
                console.error('Error:', error);
                showError('Failed to delete participant. Please try again.');
            }
        }

        // Export functions (PDF/CSV)
        async function exportToPDF() {
            try {
                const response = await fetch(`/api/participants/<%=meetingId%>?limit=1000`);
                const data = await response.json();
                
                if (data.error) throw new Error(data.error);
                
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                
                // Standard fields
                doc.text('Seminar Participants List', 14, 16);
                doc.autoTable({
                    head: [['ID', 'Name', 'Email', 'Country', 'Age', 'Organization']],
                    body: data.participants.map(p => [
                        p.id,
                        `${p.first_name} ${p.last_name}`,
                        p.email_address,
                        p.country,
                        p.age || 'N/A',
                        p.organization
                    ]),
                    startY: 25
                });
                
                // Add custom questions if needed
                if (data.participants.some(p => p.custom_answers)) {
                    doc.addPage();
                    doc.text('Custom Questions Answers', 14, 16);
                    
                    data.participants.forEach((p, index) => {
                        if (p.custom_answers) {
                            const answers = p.custom_answers;
                            const answerRows = Object.entries(answers).map(([qId, answer]) => {
                                const question = state.customQuestions[qId]?.question || `Question ${qId}`;
                                return [
                                    p.id,
                                    question,
                                    Array.isArray(answer) ? answer.join(', ') : answer.answer
                                ];
                            });
                            
                            doc.autoTable({
                                head: [['Participant ID', 'Question', 'Answer']],
                                body: answerRows,
                                startY: index === 0 ? 25 : doc.lastAutoTable.finalY + 20
                            });
                        }
                    });
                }
                
                doc.save(`participants_<%=meetingId%>.pdf`);
                
            } catch (error) {
                console.error('Error:', error);
                showError('Failed to export PDF. Please try again.');
            }
        }

        async function exportToCSV() {
            try {
                const response = await fetch(`/api/participants/<%=meetingId%>?limit=1000`);
                const data = await response.json();
                
                if (data.error) throw new Error(data.error);
                
                // Prepare CSV data
                const csvData = data.participants.map(p => {
                    const baseData = {
                        ID: p.id,
                        Name: `${p.first_name} ${p.last_name}`,
                        Email: p.email_address,
                        Country: p.country,
                        Age: p.age || 'N/A',
                        Organization: p.organization
                    };
                    
                    // Add custom answers if they exist
                    if (p.custom_answers) {
                        const answers = p.custom_answers;
                        Object.entries(answers).forEach(([qId, answer]) => {
                            const question = state.customQuestions[qId]?.question || `Question_${qId}`;
                            baseData[question] = Array.isArray(answer) ? answer.join('; ') : answer.answer;
                        });
                    }
                    
                    return baseData;
                });
                
                const csv = Papa.unparse(csvData);
                downloadCSV(csv, `participants_<%=meetingId%>.csv`);
                
            } catch (error) {
                console.error('Error:', error);
                showError('Failed to export CSV. Please try again.');
            }
        }

        function downloadCSV(csv, filename) {
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.click();
        }

        // Helper functions
        function updatePaginationUI() {
            const start = ((state.currentPage - 1) * state.itemsPerPage) + 1;
            const end = Math.min(state.currentPage * state.itemsPerPage, state.totalParticipants);
            
            document.getElementById('pagination-info').innerHTML = `
                Showing <span class="font-medium">${start}</span> to <span class="font-medium">${end}</span> 
                of <span class="font-medium">${state.totalParticipants}</span> results
            `;
            
            renderPageNumbers();
            document.getElementById('prev-page').disabled = state.currentPage === 1;
            document.getElementById('next-page').disabled = state.currentPage === state.totalPages;
        }

        function renderPageNumbers() {
            const container = document.getElementById('page-numbers');
            container.innerHTML = '';
            
            const addPageBtn = (page) => {
                const btn = document.createElement('button');
                btn.className = `px-3 py-1 border rounded text-sm font-medium ${
                    page === state.currentPage 
                        ? 'bg-purple-600 text-white border-purple-600' 
                        : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`;
                btn.textContent = page;
                btn.addEventListener('click', () => fetchParticipants(page));
                container.appendChild(btn);
            };
            
            // Always show first page
            if (state.currentPage > 2) {
                addPageBtn(1);
                if (state.currentPage > 3) container.appendChild(createEllipsis());
            }
            
            // Show current page and neighbors
            const start = Math.max(1, state.currentPage - 1);
            const end = Math.min(state.totalPages, state.currentPage + 1);
            for (let i = start; i <= end; i++) addPageBtn(i);
            
            // Always show last page
            if (state.currentPage < state.totalPages - 1) {
                if (state.currentPage < state.totalPages - 2) container.appendChild(createEllipsis());
                addPageBtn(state.totalPages);
            }
        }

        function createEllipsis() {
            const ellipsis = document.createElement('span');
            ellipsis.className = 'px-3 py-1 text-sm';
            ellipsis.textContent = '...';
            return ellipsis;
        }

        function showError(message) {
            iziToast.error({
                message: message,
                position: 'topCenter'
            });
        }

        function showSuccess(message) {
            iziToast.success({
                message: message,
                position: 'topCenter'
            });
        }

        // Event listeners
        document.getElementById('prev-page').addEventListener('click', () => {
            if (state.currentPage > 1) fetchParticipants(state.currentPage - 1);
        });

        document.getElementById('next-page').addEventListener('click', () => {
            if (state.currentPage < state.totalPages) fetchParticipants(state.currentPage + 1);
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            fetchParticipants(1);
        });
    </script>
</body>
</html>