<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= meetingData.title %> - Form Builder</title>
  <link rel="icon" href="/assets/favicon_inverted.png" type="image/x-icon">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/assets/global/css/iziToast.min.css">
  <style>
    .loader {
      border: 2px solid #f3f3f3;
      border-top: 2px solid #8b5cf6;
      border-radius: 50%;
      width: 16px;
      height: 16px;
      animation: spin 1s linear infinite;
      display: inline-block;
      vertical-align: middle;
      margin-right: 8px;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .question-item {
      transition: all 0.3s ease;
    }

    .question-item:hover {
      background-color: #f9fafb;
    }
  </style>
</head>

<body class="bg-gray-50">
  <%- include("../partials/no-loginHeader.ejs") %>

  <div class="max-w-6xl mx-auto p-6 md:p-8">
    <!-- Header Section -->
    <div class="bg-purple-800 text-white p-6 rounded-t-lg">
      <div class="flex justify-between items-start">
        <div>
          <h1 class="text-2xl md:text-3xl font-bold mt-2"><%= meetingData.title %></h1>
          <h2 class="text-xl md:text-2xl font-semibold mt-1">Form Builder</h2>
        </div>
        <div class="text-right">
          <p class="text-sm">Powered by</p>
          <p class="font-bold">ASFI</p>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="bg-white p-6 border border-gray-200">
      <div class="flex flex-col lg:flex-row gap-6">
        <!-- Left Column - Meeting Details -->
        <div class="lg:w-1/2">
          <div class="border-b border-gray-200 pb-4 mb-6">
            <h3 class="text-lg font-bold text-gray-800">Date & Time</h3>
            <p class="text-gray-700 meetingTime"><%= meetingData.time %></p>
          </div>

          <% if(meetingData.description !== "<p><br></p>") { %>
          <div class="mb-8 p-4 bg-gray-50 rounded-lg">
            <h3 class="text-lg font-bold text-gray-800 mb-2">Description</h3>
            <%- meetingData.description %>
          </div>
          <% } %>

          <div class="bg-gray-100 p-4 rounded-lg">
            <h3 class="text-lg font-bold text-gray-800 mb-3">Default Fields</h3>
            <p class="text-sm text-gray-600 mb-4">These fields are automatically included in all registration forms:</p>
            <ul class="space-y-2">
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                First Name (required)
              </li>
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Last Name (required)
              </li>
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Email (required)
              </li>
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Organization (required)
              </li>
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Job Title (required)
              </li>
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Country (required)
              </li>
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-600 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Age (required)
              </li>
            </ul>
          </div>
        </div>

        <!-- Right Column - Form Builder -->
        <div class="lg:w-1/2">
          <div class="bg-gray-100 p-6 rounded-lg">
            <div class="flex items-center mb-4">
              <div class="w-10 h-10 bg-purple-600 rounded-full flex items-center justify-center text-white mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h3 class="text-xl font-bold text-gray-800">Custom Questions</h3>
            </div>

            <div id="questionsContainer" class="space-y-4 mb-6">
              <!-- Questions will be added here dynamically -->
              <% if (meetingData.customQuestions && meetingData.customQuestions.length > 0) { %>
              <% meetingData.customQuestions.forEach((question, index) => { %>
              <div class="question-item bg-white p-4 rounded-lg border border-gray-200 relative" data-index="<%= index %>">
                <div class="flex justify-between items-start mb-2">
                  <h4 class="font-medium text-gray-700"><%= question.question %></h4>
                  <div class="flex space-x-2">
                    <button class="move-up-btn text-gray-500 hover:text-purple-600" title="Move up">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
                      </svg>
                    </button>
                    <button class="move-down-btn text-gray-500 hover:text-purple-600" title="Move down">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                    </button>
                    <button class="delete-btn text-gray-500 hover:text-red-600" title="Delete">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                      </svg>
                    </button>
                  </div>
                </div>
                <p class="text-sm text-gray-500 mb-2"><%= question.type === 'text' ? 'Short answer' : 
                                            question.type === 'textarea' ? 'Paragraph' : 
                                            question.type === 'select' ? 'Dropdown' : 
                                            question.type === 'radio' ? 'Multiple choice' : 
                                            question.type === 'checkbox' ? 'Checkboxes' : '' %></p>
                <% if (question.required) { %>
                <span class="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded">Required</span>
                <% } else { %>
                <span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">Optional</span>
                <% } %>
              </div>
              <% }); %>
              <% } %>
            </div>

            <div class="space-y-4">
              <div class="bg-white p-4 rounded-lg border border-gray-200">
                <h4 class="font-medium text-gray-800 mb-3">Add New Question</h4>
                <div class="space-y-4">
                  <div>
                    <label for="questionText" class="block text-sm font-medium text-gray-700">Question</label>
                    <input type="text" id="questionText" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="What is your research area?">
                  </div>
                  <div>
                    <label for="questionType" class="block text-sm font-medium text-gray-700">Question Type</label>
                    <select id="questionType" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-purple-500 focus:border-purple-500">
                      <option value="text">Short answer</option>
                      <option value="textarea">Paragraph</option>
                      <option value="select">Dropdown</option>
                      <option value="radio">Multiple choice</option>
                      <option value="checkbox">Checkboxes</option>
                    </select>
                  </div>
                  <div id="optionsContainer" class="hidden">
                    <label class="block text-sm font-medium text-gray-700">Options</label>
                    <div class="mt-1 space-y-2">
                      <div class="flex items-center space-x-2">
                        <input type="text" class="option-input flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="Option 1">
                        <button class="remove-option-btn text-red-500 hover:text-red-700">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                          </svg>
                        </button>
                      </div>
                    </div>
                    <button id="addOptionBtn" class="mt-2 text-sm text-purple-600 hover:text-purple-800 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                      </svg>
                      Add option
                    </button>
                  </div>
                  <div class="flex items-center">
                    <input type="checkbox" id="questionRequired" class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded">
                    <label for="questionRequired" class="ml-2 block text-sm text-gray-700">Required</label>
                  </div>
                  <button id="addQuestionBtn" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
                    Add Question
                  </button>
                </div>
              </div>
            </div>

            <div class="mt-6 pt-4 border-t border-gray-200">
              <button id="saveFormBtn" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                Save Form
              </button>
            </div>
            <div class="mt-6 pt-4 border-t border-gray-200"> 
                <button type="button" class="w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" onclick="window.location.href='/preview/pre-reg/<%=meetingData.channel%>'">
                    Preview Form
                </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div class="bg-gray-100 p-4 text-center text-sm text-gray-600 rounded-b-lg border border-gray-200">
      <p>© <%= new Date().getFullYear() %> ASFI. All rights reserved.</p>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.1/build/global/luxon.min.js"></script>
  <script src="/assets/global/js/iziToast.min.js"></script>

  <script>
    // Format meeting time
    document.addEventListener('DOMContentLoaded', () => {
      const utcTime = '<%= meetingData.time %>';
      const localTime = luxon.DateTime
        .fromISO(utcTime)
        .setZone(luxon.DateTime.local().zoneName)
        .toFormat('LLLL dd, yyyy hh:mm a');

      document.querySelectorAll('.meetingTime').forEach(container => {
        container.textContent = `${localTime} ( ${luxon.DateTime.local().zoneName} )`;
      });

      // Show/hide options container based on question type
      const questionType = document.getElementById('questionType');
      const optionsContainer = document.getElementById('optionsContainer');

      questionType.addEventListener('change', function() {
        if (this.value === 'select' || this.value === 'radio' || this.value === 'checkbox') {
          optionsContainer.classList.remove('hidden');
        } else {
          optionsContainer.classList.add('hidden');
        }
      });

      // Add option button
      const addOptionBtn = document.getElementById('addOptionBtn');
      const optionsContainerDiv = optionsContainer.querySelector('.space-y-2');

      let optionCount = 1;

      addOptionBtn.addEventListener('click', function() {
        optionCount++;
        const newOptionDiv = document.createElement('div');
        newOptionDiv.className = 'flex items-center space-x-2';
        newOptionDiv.innerHTML = `
                    <input type="text" class="option-input flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-purple-500 focus:border-purple-500" placeholder="Option ${optionCount}">
                    <button class="remove-option-btn text-red-500 hover:text-red-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                `;
        optionsContainerDiv.appendChild(newOptionDiv);

        // Add event listener to the new remove button
        newOptionDiv.querySelector('.remove-option-btn').addEventListener('click', function() {
          optionsContainerDiv.removeChild(newOptionDiv);
          optionCount--;
        });
      });

      // Add question button
      const addQuestionBtn = document.getElementById('addQuestionBtn');
      const questionsContainer = document.getElementById('questionsContainer');

      addQuestionBtn.addEventListener('click', function() {
        const questionText = document.getElementById('questionText').value.trim();
        const questionType = document.getElementById('questionType').value;
        const isRequired = document.getElementById('questionRequired').checked;

        if (!questionText) {
          iziToast.error({
            title: 'Error',
            message: 'Please enter a question',
            position: 'topCenter'
          });
          return;
        }

        // Create question object
        const question = {
          question: questionText,
          type: questionType,
          required: isRequired
        };

        // Add options if applicable
        if (questionType === 'select' || questionType === 'radio' || questionType === 'checkbox') {
          const optionInputs = document.querySelectorAll('.option-input');
          const options = Array.from(optionInputs).map(input => input.value.trim()).filter(opt => opt);

          if (options.length === 0) {
            iziToast.error({
              title: 'Error',
              message: 'Please add at least one option',
              position: 'topCenter'
            });
            return;
          }

          question.options = options;
        }

        // Add question to the container
        addQuestionToUI(question);

        // Reset form
        document.getElementById('questionText').value = '';
        document.getElementById('questionRequired').checked = false;

        // Clear options
        const optionInputs = document.querySelectorAll('.option-input');
        if (optionInputs.length > 1) {
          for (let i = 1; i < optionInputs.length; i++) {
            optionsContainerDiv.removeChild(optionInputs[i].parentNode.parentNode);
          }
        }
        optionInputs[0].value = '';
        optionCount = 1;
      });

      // Function to add question to UI
      function addQuestionToUI(question) {
        const questionDiv = document.createElement('div');
        questionDiv.className = 'question-item bg-white p-4 rounded-lg border border-gray-200 relative';

        // Store the question data as data attributes
        if (question.options) {
          questionDiv.dataset.options = JSON.stringify(question.options);
        }

        let typeText = '';
        switch (question.type) {
          case 'text':
            typeText = 'Short answer';
            break;
          case 'textarea':
            typeText = 'Paragraph';
            break;
          case 'select':
            typeText = 'Dropdown';
            break;
          case 'radio':
            typeText = 'Multiple choice';
            break;
          case 'checkbox':
            typeText = 'Checkboxes';
            break;
        }

        questionDiv.innerHTML = `
                    <div class="flex justify-between items-start mb-2">
                        <h4 class="font-medium text-gray-700">${question.question}</h4>
                        <div class="flex space-x-2">
                            <button class="move-up-btn text-gray-500 hover:text-purple-600" title="Move up">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                            <button class="move-down-btn text-gray-500 hover:text-purple-600" title="Move down">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                            <button class="delete-btn text-gray-500 hover:text-red-600" title="Delete">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <p class="text-sm text-gray-500 mb-2">${typeText}</p>
                    ${question.required ? 
                        '<span class="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded">Required</span>' : 
                        '<span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">Optional</span>'}
                `;

        questionsContainer.appendChild(questionDiv);

        // Add event listeners for the new buttons
        questionDiv.querySelector('.delete-btn').addEventListener('click', function() {
          questionsContainer.removeChild(questionDiv);
        });

        questionDiv.querySelector('.move-up-btn').addEventListener('click', function() {
          const prev = questionDiv.previousElementSibling;
          if (prev) {
            questionsContainer.insertBefore(questionDiv, prev);
          }
        });

        questionDiv.querySelector('.move-down-btn').addEventListener('click', function() {
          const next = questionDiv.nextElementSibling;
          if (next) {
            questionsContainer.insertBefore(next, questionDiv);
          }
        });
      }

      // Save form button
      const saveFormBtn = document.getElementById('saveFormBtn');

      saveFormBtn.addEventListener('click', async function() {
        // Disable button and show loader
        saveFormBtn.disabled = true;
        saveFormBtn.innerHTML = '<span class="loader"></span> Saving...';

        try {
          // Collect all questions
          const questions = [];
          const questionItems = document.querySelectorAll('.question-item');

          questionItems.forEach(item => {
            const questionText = item.querySelector('h4').textContent;
            const typeText = item.querySelector('p.text-sm').textContent;
            const isRequired = item.querySelector('span').textContent === 'Required';

            let questionType;
            switch (typeText) {
              case 'Short answer':
                questionType = 'text';
                break;
              case 'Paragraph':
                questionType = 'textarea';
                break;
              case 'Dropdown':
                questionType = 'select';
                break;
              case 'Multiple choice':
                questionType = 'radio';
                break;
              case 'Checkboxes':
                questionType = 'checkbox';
                break;
            }

            // Create the question object in the format your backend expects
            const question = {
              text: questionText,
              type: questionType,
              required: isRequired
            };

            // If this is a question with options, we need to include them
            if (questionType === 'select' || questionType === 'radio' || questionType === 'checkbox') {
              // Note: This assumes options are stored in a data attribute
              // You might need to modify how you store options when creating questions
              const options = item.dataset.options ? JSON.parse(item.dataset.options) : [];
              question.options = options;
            }

            questions.push(question);
          });

          // Prepare the data to send
          const formData = {
            meetingId: '<%= meetingData.id %>',
            questions: questions
          };

          console.log('Sending data:', formData); // For debugging

          // Send to server
          const response = await fetch('/manage/pre-reg/saveForm', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': '<%= csrfToken %>' // Add CSRF protection if needed
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.error || 'Failed to save form');
          }

          iziToast.success({
            title: 'Success',
            message: data.success || 'Form saved successfully',
            position: 'topCenter'
          });

        } catch (error) {
          console.error('Error saving form:', error);
          iziToast.error({
            title: 'Error',
            message: error.message || 'Failed to save form',
            position: 'topCenter'
          });
        } finally {
          saveFormBtn.disabled = false;
          saveFormBtn.textContent = 'Save Form';
        }
      });
      // Add event listeners to existing delete and move buttons
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const questionItem = this.closest('.question-item');
          questionsContainer.removeChild(questionItem);
        });
      });

      document.querySelectorAll('.move-up-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const questionItem = this.closest('.question-item');
          const prev = questionItem.previousElementSibling;
          if (prev) {
            questionsContainer.insertBefore(questionItem, prev);
          }
        });
      });

      document.querySelectorAll('.move-down-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const questionItem = this.closest('.question-item');
          const next = questionItem.nextElementSibling;
          if (next) {
            questionsContainer.insertBefore(next, questionItem);
          }
        });
      });
    });
  </script>
</body>

</html>